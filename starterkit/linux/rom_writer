#!/usr/bin/expect
# SPDX-License-Identifier: GPL-2.0
#====================================
#
# Renesas StarterKit ROM Writer
#
#====================================
set top [file dirname [file dirname [file normalize [info script]]]]
set soc   ""
set ver   ""
set mode  ""
set tty   ""

proc argv_check {} {
    global argv
    global top
    global soc
    global ver
    global mode
    global tty

    if {[llength $argv] != 4} {
	puts "rom_writer {h3/m3/m3n} {yocto_ver} {sw/cpld} {tty}"
	exit 0
    }
    set soc  [lindex $argv 0]
    set ver  [lindex $argv 1]
    set mode [lindex $argv 2]
    set tty  [lindex $argv 3]

    set files [glob -nocomplain "${top}/linux/script/yocto/${ver}/${soc}*"]
    if { $files == "" } {
	puts "run make first"
	exit
    }

    if { $mode != "sw" && $mode != "cpld" } {
	puts "select sw or cpld"
	exit
    }
}

proc ask_yes_no {msg} {
    puts "$msg (y/n) ?"
    set ans [gets stdin]
    if {$ans != "y"} {
	exit 0
    }
}

proc power_check {onoff} {
    puts "********************"
    puts "Board Power ${onoff}"
    puts "********************"
    ask_yes_no "OK ?"
}

proc sw_change_mode {} {
    puts "********************"
    puts "Change the Mode"
    dipswitch_update
    puts "********************"
    ask_yes_no "Are you ready ?"
}

proc sw_change_back {} {
    puts "********************"
    puts "Change back the Mode"
    dipswitch_normal
    puts "********************"
    ask_yes_no "Are you ready ?"
}

proc upload_file {file} {
    #
    # read srec file
    #
    set f [open $file]
    set srec [split [read $f] "\n"]
    close $f

    #
    # send srec as ascii
    #
    set send_slow {10 .001}
    foreach s $srec {
	send -s "$s\n"
    }
}

proc file_check {lists} {
    set err 0

    #
    # it expects lists are
    #
    #	top,save,file
    #	top,save,file
    #	top,save,file
    #	...
    #
    foreach list $lists {
	set data [split $list ","]
	if {[llength $data] != 3} {
	    return
	}

	#
	# It assumes files are
	# located at pwd
	#
	set pwd  [format "%s" [pwd] ]
	set file [lindex $data 2]

	if { [ file exists "${pwd}/${file}" ] != 1 } {
	    puts "file not found at pwd: ${pwd}/${file}"
	    set err 1
	}
    }

    if {$err != 0} {
	exit 0
    }
}

proc mot {} {
    global top
    return $top/linux/script/flash_writer/AArch32_output/AArch32_Flash_writer_SCIF_DUMMY_CERT_E6300400_ULCB.mot
}

proc mot_check {} {
    set mot [mot]

    if { [ file exists $mot ] != 1 } {
	puts "You don't have mot"
	puts "run make first"
	exit 0
    }
}

proc cpld_mode {} {
    set mot [mot]

    sleep 1
    send "\003";	# Ctrl-C
    expect {
	"=>" { send "\r" }
    }
    expect {
	"=>" { send "cpld write 0x00 0x802181fe\r" }
    }
    expect {
	"=>" { send "cpld write 0x80 0x01\r" }
    }
    expect {
	"please send !"
    }
    upload_file $mot
    expect {
	">"
    }
}

proc before_minicom {} {
    global mode

    power_check "OFF"
    if {$mode == "sw"} {
	sw_change_mode
    }
    power_check "ON"
}

proc after_minicom {} {
    global mode

    if {$mode == "sw"} {
	sw_change_back
    } else {
	cpld_mode
    }
}

proc run_main {lists} {
    #
    # it expects lists are
    #
    #	addr,save,file
    #	addr,save,file
    #	addr,save,file
    #	...
    #
    foreach list $lists {

	#
	# list is
	#	addr,save,file
	#
	set data [split $list ","]
	if {[llength $data] != 3} {
	    return
	}
	set addr [lindex $data 0]
	set save [lindex $data 1]
	set file [lindex $data 2]

	send "\r"

	expect {
	    ">" { send "xls2\r" }
	}
	expect {
	    "Select \(1-3\)>" { send "3\r" }
	}
	expect {
	    "(Push Y key)"    { send "Y" }
	}
	expect {
	    "(Push Y key)"    { send "Y" }
	}
	expect {
	    "Please Input : H'"    { send "$addr\r" }
	}
	expect {
	    "Please Input : H'"    { send "$save\r" }
	}
	expect {
	    "please send !"
	}

	upload_file $file

	expect {
	    "Clear OK?(y/n)" { send "y" }
	}
	expect {
	    ">"
	}
    }
}

argv_check
source $top/linux/script/$soc
